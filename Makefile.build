#    pixi-tools: a set of software to interface with the Raspberry Pi
#    and PiXi-200 hardware
#    Copyright (C) 2014 Simon Cantrill
#
#    pixi-tools is free software; you can redistribute it and/or
#    modify it under the terms of the GNU Lesser General Public
#    License as published by the Free Software Foundation; either
#    version 2.1 of the License, or (at your option) any later version.
#
#    This library is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public
#    License along with this library; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

# system python executable
PYTHON           = python
python_rootdir   = $(DESTDIR:%=--root=%)

CP = cp

INSTALL_EXEC = install -v
INSTALL_DATA = install -v -m 0644

common_CFLAGS   = -std=c99   -fmessage-length=0 -Wall -Wextra -Wstrict-prototypes -Wmissing-declarations -Wmissing-prototypes -pedantic
common_CXXFLAGS = -std=c++0x -fmessage-length=0 -Wall -Wextra
common_CPPFLAGS = -I$(topdir) -I. -D_GNU_SOURCE

toolsdir = $(topdir)/tools
version_h = $(topdir)/libpixi/version.h

project_info = $(topdir)/project-info
include $(project_info)
project_version = $(PROJECT_VERSION)

build_version := $(shell (GIT_DIR=$(topdir)/.git git describe 2>/dev/null || echo $(project_version)) | sed 's/pixi-tools-//')

substitutions   = \
	-e 's,@prefix@,$(prefix),' \
	-e 's,@libdir@,$(libdir),' \
	-e 's,@includedir@,$(includedir),' \
	-e 's,@PROJECT_VERSION@,$(project_version),' \
	-e 's,@CC@,$(CC),' \
	-e 's,@CXX@,$(CXX),'

# python 'site' packages directory within build tree
build_bindir   = bin
build_libdir   = lib
build_pylibdir = python-site
build_htmldir  = share/pixi-tools/html
build_apidir   = $(build_htmldir)/api

prefix    = /usr/local
bindir    = $(prefix)/bin
libdir    = $(prefix)/lib
htmldir   = $(prefix)/$(build_htmldir)
pkgconfigdir = $(libdir)/pkgconfig

# run packages-dir.py only on first expansion of $(pylibdir)
get_pylibdir = $(shell $(PYTHON) $(toolsdir)/packages-dir.py $(libdir)/python$(PYTHON_VERSION))
pylibdir     = $(eval pylibdir := $(get_pylibdir))$(pylibdir)

includedir = $(prefix)/include

pythonpath = $(CURDIR)/lib/python$(PYTHON_VERSION)/site-packages
prepare_build_python = make install-purepython install-python prefix=$(CURDIR)
test_env = PYTHONPATH=$(pythonpath) LD_LIBRARY_PATH=$(CURDIR)/$(build_libdir)

libpixi          = lib/libpixi.so
libpixi_ABI      = 0
libpixi_HEADERS := $(shell cd $(topdir) && find libpixi/ -name \*.h | grep -v private)
libpixi_SOURCES := $(shell cd $(topdir) && find libpixi/ -name \*.c)
libpixi_OBJECTS := $(libpixi_SOURCES:.c=.o)

pixisim          = lib/pixisim.so
pixisim_SOURCES := $(shell cd $(topdir) && find pixisim/ -name \*.c)
pixisim_OBJECTS := $(pixisim_SOURCES:.c=.o)
pixisim_LIBS     = -Llib -lpixi

pio          = bin/pio
pio_SOURCES := $(shell cd $(topdir) && find pio/ -name \*.c)
pio_OBJECTS := $(pio_SOURCES:.c=.o)
pio_LIBS      = -Llib -lpixi

pixi-ext          = bin/pixi-ext
pixi-ext_SOURCES := $(shell cd $(topdir) && find extensions/ -name \*.c)
pixi-ext_OBJECTS := $(pixi-ext_SOURCES:.c=.o)
pixi-ext_LIBS      = -Llib -lpixi

pixi-tty          = bin/pixi-tty
pixi-tty_SOURCES := $(shell cd $(topdir) && find pixi-tty/ -name \*.cpp)
pixi-tty_OBJECTS := $(pixi-tty_SOURCES:.cpp=.o)
pixi-tty_LIBS    := -Llib -lpixi $(shell pkg-config fuse --libs)

pythonPackage      = pixitools

_pi          = $(build_pylibdir)/_pi.so
_pi_SOURCES  = swig/pi.c
_pi_OBJECTS := $(_pi_SOURCES:.c=.o)
_pi_LIBS     = -Llib -lpixi

_pixi          = $(build_pylibdir)/_pixi.so
_pixi_SOURCES  = swig/pixi.c
_pixi_OBJECTS := $(_pixi_SOURCES:.c=.o)
_pixi_LIBS     = -Llib -lpixi

html_SOURCES := $(shell cd $(topdir)/html && find * -name \*.html -or -iname \*.js -or -iname \*.css)
html_FILES   := $(addprefix $(build_htmldir)/,$(html_SOURCES))

LIBS       = $(libpixi) $(pixisim)
HEADERS    = $(libpixi_HEADERS)
APPS       = $(pio) $(pixi-tty)
PYTHON_EXTS = $(_pi) $(_pixi)
PYTHON_MODS = $(build_pylibdir)/pi.py $(build_pylibdir)/pixi.py
TARGETS    = $(LIBS) $(APPS) $(PYTHON_EXTS) $(html_FILES)
MOST_TARGETS = $(LIBS) $(APPS)
OBJECTS    = $(libpixi_OBJECTS) $(pio_OBJECTS) $(pixi-tty_OBJECTS) $(pixi-ext_OBJECTS) $(_pixi_OBJECTS) $(_pi_OBJECTS)

VPATH = $(topdir)

build_CPPFLAGS = $(common_CPPFLAGS)
build_CFLAGS   = $(common_CFLAGS)
build_CXXFLAGS = $(common_CXXFLAGS)


.PHONY: all most check check-python check-header-syntax run-python run-python-demo run-server help-custom temp-install
.SECONDARY: $(_pi_SOURCES) $(_pixi_SOURCES)

all: build-version.h $(version_h) $(TARGETS)

most: $(version_h) $(MOST_TARGETS)
	echo $(BUILD_MODE) $(MOST_TARGETS)

build-version.h: buildver-$(build_version)
	echo '#define PIXI_TOOLS_BUILD_VERSION "$(build_version)"' > $@

buildver-$(build_version):
	rm -f buildver-*
	echo $(build_version) > $@

$(libpixi): build_CFLAGS += -fPIC
$(libpixi): build-version.h $(libpixi_OBJECTS)

$(pixisim): build_CFLAGS += -fPIC
$(pixisim): $(libpixi) $(pixisim_OBJECTS)

$(pio): build-version.h $(libpixi) $(pio_OBJECTS)

$(pixi-ext): $(libpixi) $(pixi-ext_OBJECTS)

$(pixi-tty): build_CPPFLAGS += -I/usr/include/fuse -D_FILE_OFFSET_BITS=64
$(pixi-tty): LINK = $(LINKCXX)
$(pixi-tty): $(libpixi) $(pixi-tty_OBJECTS)

$(_pi): build_CFLAGS = $(common_CFLAGS) $(PYTHON_CFLAGS) -Wno-missing-prototypes -Wno-missing-declarations
$(_pi): $(libpixi) $(_pi_OBJECTS)

$(_pixi): build_CFLAGS = $(common_CFLAGS) $(PYTHON_CFLAGS) -Wno-missing-prototypes -Wno-missing-declarations
$(_pixi): $(libpixi) $(_pixi_OBJECTS)

swig/%.c: swig/%.i
	$(ECHO) "  SWIG    $@"
	$(CMD)mkdir -p swig $(build_pylibdir)
	$(CMD)swig -python -I$(topdir) -outdir $(build_pylibdir) -o $@ $<

$(build_htmldir)/%.html: html/%.html
	$(ECHO) "  SUBST   $@"
	$(CMD)mkdir -p $(@D)
	$(CMD)$(toolsdir)/subst $(topdir)/html/*.part.htm < $< > $@

$(build_htmldir)/%: html/%
	$(ECHO) "  CP      $@"
	$(CMD)mkdir -p $(@D)
	$(CMD)$(CP) $< $@

$(version_h): $(project_info)
	$(ECHO) $@
	$(CMD). $< && ( \
		echo "#define LIBPIXI_VERSION \"$$PROJECT_VERSION\"" ; \
		echo "#define LIBPIXI_VERSION_INT $$LIBPIXI_VERSION_INT" ; \
	) > $@

include $(topdir)/Makefile.rules

check: check-python check-header-syntax

check-python: all temp-install
	$(test_env) $(PYTHON) -m pixitools.test --verbose

check-header-syntax:
	cd $(topdir) && tools/check-headers

doc:
	$(ECHO) $(build_apidir)
	$(CMD)sed 's,OUTPUT_DIRECTORY.*=.*,OUTPUT_DIRECTORY = $(CURDIR)/$(build_apidir),' < $(topdir)/Doxyfile > Doxyfile
	$(CMD)rm -rf $(build_apidir)
	$(CMD)mkdir -p $(build_apidir)
	$(CMD)cd $(topdir) && doxygen $(CURDIR)/Doxyfile

run-python: all temp-install
	$(test_env) $(PYTHON)

run-python-demo: all temp-install
	$(test_env) bin/pixi-demo

run-server: all temp-install
	$(test_env) bin/pixi-server $(build_htmldir)

temp-install: all
	$(prepare_build_python)

help: help-custom

help-custom:
	@echo "make clean                     Clean the source dir and remove a build dir"
	@echo "make clean-all-builds          Clean the source dir and remove all build dirs"
	@echo "make clean                     Clean the source dir"
	@echo "make check                     Run the tests"
	@echo "make multi-check               Run the tests for all common build configurations"
	@echo
	@echo "The build configuration is dependent on BUILD_MODE and python version"
	@echo "make                           Runs a standard build"
	@echo "make BUILD_MODE=debug          Runs a debug build"
	@echo "make PYTHON_VERSION=3          Build against python3"
	@echo "make doc                       Run doxygen to generate the API reference html"
	@echo
	@echo "make install                   Install files to 'prefix' [$(prefix)] (DESTDIR is honoured)"
	@echo "make uninstall                 Remove installed files from 'prefix' [$(prefix)] (DESTDIR is honoured)"
	@echo
	@echo "make run-python                Run an interactive python prompt, with a suitable PYTHONPATH"
	@echo "make run-python-demo           Run simple python pixi demo"
	@echo "make run-server                Run the server - WARNING - probably a gaping security hole"

all_install   := install-libraries install-headers install-exec install-python install-purepython install-files
all_uninstall := $(subst install,uninstall,$(all_install))

.PHONY: install $(all_install)
.PHONY: uninstall $(all_uninstall)

install: $(all_install)
uninstall: $(all_uninstall)

install-exec: $(APPS)
	$(ECHO) installing executables
	$(CMD)mkdir -p $(DESTDIR)$(bindir)
	$(CMD)for target in $(APPS); do \
		$(INSTALL_EXEC) $$target $(DESTDIR)$(bindir)/ || exit 1 ; \
	done
	$(CMD)for target in pixi-cc pixi-c++; do \
		sed $(substitutions) < $(topdir)/libpixi/$$target.in > $$target || exit 1 ; \
		$(INSTALL_EXEC) $$target $(DESTDIR)$(bindir) || exit 1 ; \
	done

uninstall-exec:
	$(ECHO) uninstalling executables
	$(CMD)for target in $(notdir $(APPS)); do \
		rm -f -v $(DESTDIR)$(bindir)/$$target ; \
	done

install-libraries: $(LIBS)
	$(ECHO) installing libraries
	$(CMD)mkdir -p $(DESTDIR)$(libdir) $(DESTDIR)$(pkgconfigdir)
	$(CMD)$(INSTALL_EXEC) $(libpixi) $(DESTDIR)$(libdir)/libpixi.so.$(libpixi_ABI)
	$(CMD)ln -sf libpixi.so.$(libpixi_ABI) $(DESTDIR)$(libdir)/libpixi.so
	$(CMD)sed $(substitutions) < $(topdir)/libpixi/libpixi.pc.in > libpixi.pc
	$(CMD)$(INSTALL_DATA) -m 0644 libpixi.pc $(DESTDIR)$(pkgconfigdir)

uninstall-libraries:
	$(ECHO) uninstalling libraries
	$(CMD)rm -f -v $(DESTDIR)$(libdir)/libpixi.so.$(libpixi_ABI) $(DESTDIR)$(libdir)/libpixi.so $(DESTDIR)$(pkgconfigdir)/libpixi.pc

install-headers:
	$(ECHO) installing headers
	$(CMD)cd $(topdir) && for target in $(HEADERS); do \
		targetinclude=$(DESTDIR)$(includedir)/$$(dirname $$target); \
		mkdir -p -v $$targetinclude || exit 1; \
		$(INSTALL_DATA) $$target $$targetinclude || exit 1 ; \
	done

uninstall-headers:
	$(ECHO) uninstalling headers
	$(CMD)cd $(topdir) && for target in $(HEADERS); do \
		targetinclude=$(DESTDIR)$(includedir)/$$(dirname $$target); \
		rm -f -v $(DESTDIR)$(includedir)/$$target; \
		rmdir -v --ignore-fail-on-non-empty $$targetinclude; \
	done

.PHONY: pylibdir

# For some reason, the first $(pylibdir) expansion is sometimes wrong,
# so force it twice to ensure it is correct
pylibdir:
	@echo pylibdir is firstly $(pylibdir), then $(pylibdir)

install-python: $(PYTHON_EXTS) $(PYTHON_MODS) pylibdir
	$(ECHO) installing python modules
	$(CMD)mkdir -p $(DESTDIR)$(pylibdir)/$(pythonPackage)
	$(CMD)for target in $(PYTHON_EXTS); do \
		$(INSTALL_EXEC) $$target $(DESTDIR)$(pylibdir)/$(pythonPackage)/ || exit 1 ; \
	done
	$(CMD)for target in $(PYTHON_MODS); do \
		$(INSTALL_DATA) $$target $(DESTDIR)$(pylibdir)/$(pythonPackage)/ || exit 1 ; \
	done

uninstall-python: pylibdir
	$(ECHO) uninstalling python modules
	$(CMD)for target in $(notdir $(PYTHON_EXTS)); do \
		rm -f -v $(DESTDIR)$(pylibdir)/$$target ; \
	done
	$(CMD)for target in $(notdir $(PYTHON_MODS)); do \
		rm -f -v $(DESTDIR)$(pylibdir)/$$target ; \
	done

install-purepython:
	$(ECHO) installing pure python modules
	$(CMD)rm -rf $(topdir)/build/python-setup
	$(CMD)cd $(topdir) && $(PYTHON) tools/setup.py install --prefix $(prefix) $(python_rootdir)

uninstall-purepython:
	$(ECHO) installing pure python modules [TODO]

install-files:
	$(ECHO) installing general files
	$(CMD)mkdir -p $(DESTDIR)$(prefix)
	$(CMD)$(CP) -a share $(DESTDIR)/$(prefix)/
